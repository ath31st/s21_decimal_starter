package dec.starter.constant;

import static dec.starter.constant.StringConstants.SLASH_S;

public enum TestStringConstants {
  DONT_FORGET_INCLUDE("#include \"не забудьте здесь добавить свой header.h\""
      + System.lineSeparator()),
  TEST_OK_TEMPLATE("START_TEST(%s) {" + System.lineSeparator()
      + SLASH_S.getValue() + System.lineSeparator()
      + "  %s" + System.lineSeparator()
      + SLASH_S.getValue() + System.lineSeparator()
      + "  %s" + System.lineSeparator()
      + SLASH_S.getValue() + System.lineSeparator()
      + "  %s" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int return_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + "  ck_assert_int_eq(return_value, 0);" + System.lineSeparator()
      + "  ck_assert_uint_eq(dec_check.bits[0], result.bits[0]);" + System.lineSeparator()
      + "  ck_assert_uint_eq(dec_check.bits[1], result.bits[1]);" + System.lineSeparator()
      + "  ck_assert_uint_eq(dec_check.bits[2], result.bits[2]);" + System.lineSeparator()
      + "  ck_assert_uint_eq(dec_check.bits[3], result.bits[3]);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()),

  TEST_FAIL_TEMPLATE("START_TEST(%s) {" + System.lineSeparator()
      + SLASH_S.getValue() + System.lineSeparator()
      + "  %s" + System.lineSeparator()
      + SLASH_S.getValue() + System.lineSeparator()
      + "  %s" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  // overflow" + System.lineSeparator()
      + "  int check = %d; // %s" + System.lineSeparator()
      + "  int return_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + "  ck_assert_int_eq(return_value, check);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()),

  TEST_INVALID_DEC_CASE_NAME_TEMPLATE("  tcase_add_test(tc, invalid_dec_%s_%d);"),
  TEST_OK_CASE_NAME_TEMPLATE("  tcase_add_test(tc, %s_%d);"),
  TEST_FAIL_CASE_NAME_TEMPLATE("  tcase_add_test(tc, fail_%s_%d);"),

  TEST_SUITE_TEMPLATE("Suite *%s_cases(void) {" + System.lineSeparator()
      + "  Suite *c = suite_create(\"%s_cases\");" + System.lineSeparator()
      + "  TCase *tc = tcase_create(\"%s_tc\");" + System.lineSeparator()
      + System.lineSeparator()
      + "%s"
      + System.lineSeparator()
      + "  suite_add_tcase(c, tc);" + System.lineSeparator()
      + "  return c;" + System.lineSeparator()
      + "}" + System.lineSeparator()),

  TEST_INVALID_DECIMAL_TEMPLATE("START_TEST(invalid_dec_%s_1) {" + System.lineSeparator()
      + "  // ссылка на результат - NULL" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0x1, 0x0, 0x0, 0x0}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0x1, 0x0, 0x0, 0x0}};" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, NULL);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_2) {" + System.lineSeparator()
      + "  // степень 56 (допустимое значение от 0 до 28)" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0, 0, 0, 0x380000}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x0}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_3) {" + System.lineSeparator()
      + "  // степень 29 (допустимое значение от 0 до 28)" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{1, 0, 0, 0x1D0000}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x0}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_4) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{1, 0, 0, 0x1C0001}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_5) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{-1, 0, 0, 0x1C8000}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0x0, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_6) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{-1, 0, 0, 0x11C0000}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_7) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{-1, 0, 0, 0x401C0000}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_8) {" + System.lineSeparator()
      + "  // Все биты имеют максимальное значение" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_9) {" + System.lineSeparator()
      + "  // степень 56 (допустимое значение от 0 до 28)" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0, 0, 0, 0x380000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_10) {" + System.lineSeparator()
      + "  // степень 29 (допустимое значение от 0 до 28)" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{1, 0, 0, 0x1D0000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x0}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_11) {" + System.lineSeparator()
      + "  // степень 29 (допустимое значение от 0 до 28)" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0, 0, 0, 0x1D0000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x20000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_12) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{1, 0, 0, 0x1C0001}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x20000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_13) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 0-15 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{1, 0, 0, 0x1C8000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_14) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{1, 0, 0, 0x11C0000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_15) {" + System.lineSeparator()
      + "  // степень 28" + System.lineSeparator()
      + "  // биты 24-30 не пустые" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{1, 0, 0, 0x401C0000}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator()
      + System.lineSeparator()
      + "START_TEST(invalid_dec_%s_16) {" + System.lineSeparator()
      + "  // Все биты имеют максимальное значение" + System.lineSeparator()
      + "  s21_decimal dec_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};" + System.lineSeparator()
      + "  s21_decimal dec_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x140000}};" + System.lineSeparator()
      + "  s21_decimal result;" + System.lineSeparator()
      + "  int result_value = %s(dec_1, dec_2, &result);" + System.lineSeparator()
      + System.lineSeparator()
      + "  ck_assert_int_eq(result_value, 1);" + System.lineSeparator()
      + "}" + System.lineSeparator()
      + "END_TEST" + System.lineSeparator());

  private final String value;

  TestStringConstants(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }
}
